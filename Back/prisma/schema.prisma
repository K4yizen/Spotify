generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model albums {
  id         Int                @id @default(autoincrement())
  title      String             @db.VarChar(250)
  albumCover String             @db.VarChar(500)
  genres_id  Int
  genres     genres             @relation(fields: [genres_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_albums_genres1")
  songs      songs_has_albums[]

  artists       artists? @relation(fields: [artistsUserId], references: [userId])
  artistsUserId Int?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model artists {
  userId            Int                 @id @default(autoincrement())
  name              String              @db.VarChar(50)
  users_id          Int
  artistCover       String              @db.VarChar(45)
  users             users               @relation(fields: [users_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_artists_users1")
  artists_has_songs artists_has_songs[]
  follow            follow[]
  albums            albums[]
}

model artists_has_songs {
  artists_userId Int
  songs_id       Int
  artists        artists @relation(fields: [artists_userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_artists_has_songs_artists1")
  songs          songs   @relation(fields: [songs_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_artists_has_songs_songs1")

  @@id([artists_userId, songs_id])
}

model follow {
  users_id       Int
  artists_userId Int
  artists        artists @relation(fields: [artists_userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_has_artists_artists1")
  users          users   @relation(fields: [users_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_has_artists_users1")

  @@id([users_id, artists_userId])
}

model genres {
  id               Int      @id @default(autoincrement())
  categoryName     String   @db.VarChar(50)
  categoryColor    String   @db.VarChar(45)
  categoryPictures String   @db.VarChar(45)
  albums           albums[]
  songs            songs[]
}

model like {
  users_id Int
  songs_id Int
  songs    songs @relation(fields: [songs_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_has_songs_songs1")
  users    users @relation(fields: [users_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_has_songs_users1")

  @@id([users_id, songs_id])
}

model playlistSongs {
  id                      Int                       @id @default(autoincrement())
  songId                  Int
  playlistId              Int
  playlistOrder           Int
  songs_has_playlistSongs songs_has_playlistSongs[]
}

model playlists {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(50)
  dateCreated         DateTime              @db.DateTime(0)
  users_id            Int
  playlistCover       String                @db.VarChar(45)
  users               users                 @relation(fields: [users_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_playlists_users1")
  playlists_has_users playlists_has_users[]

}

model playlists_has_users {
  playlists_id Int
  users_id     Int
  playlists    playlists @relation(fields: [playlists_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_playlists_has_users_playlists1")
  users        users     @relation(fields: [users_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_playlists_has_users_users1")

  @@id([playlists_id, users_id])
}

model songs {
  id                      Int                       @id @default(autoincrement())
  title                   String                    @db.VarChar(250)
  artist                  String
  album                   String
  duration                String                    @db.VarChar(8)
  path                    String                    @db.VarChar(500)
  albumOrder              Int
  plays                   Int
  albums_id               Int
  genres_id               Int
  songCover               String                    @db.VarChar(45)
  artists_has_songs       artists_has_songs[]
  like                    like[]
  albums                  songs_has_albums[]
  genres                  genres                    @relation(fields: [genres_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_songs_genres1")
  songs_has_playlistSongs songs_has_playlistSongs[]
}

model songs_has_albums {
  songs     songs  @relation(fields: [songs_id], references: [id])
  songs_id  Int
  albums    albums @relation(fields: [albums_id], references: [id])
  albums_id Int
  order     Int

  @@id([songs_id, albums_id])
}

model songs_has_playlistSongs {
  songs_id         Int
  playlistSongs_id Int
  playlistSongs    playlistSongs @relation(fields: [playlistSongs_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_songs_has_playlistSongs_playlistSongs1")
  songs            songs         @relation(fields: [songs_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_songs_has_playlistSongs_songs")

  @@id([songs_id, playlistSongs_id])
}

model users {
  id                  Int                   @id @default(autoincrement())
  username            String                @db.VarChar(25)
  firstname           String                @db.VarChar(50)
  lastname            String                @db.VarChar(50)
  email               String                @db.VarChar(200)
  password            String                @db.VarChar(32)
  profile_pic         String?                @db.VarChar(500)
  artists             artists[]
  follow              follow[]
  like                like[]
  playlists           playlists[]
  playlists_has_users playlists_has_users[]
}
